name: Release

on:
  push:
    branches: [ master ]

jobs:
  # Builds for Windows and caches it's artifacts
  build-windows:
    runs-on: windows-latest
    permissions:
      contents: write
    defaults:
      run:
        working-directory: ./tauri-app
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Node setup
        uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: Rust setup
        uses: dtolnay/rust-toolchain@v1

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
          yarn install
      
      - name: Build
        run: yarn tauri build

      - name: Creats artifacts folder
        shell: pwsh
        run: New-Item -Path "windows-artifacts" -ItemType Directory
      
      - name: Create portable artifact in the artifacts folder
        shell: pwsh
        run: ../.github/scripts/windows/desktop-portable-zip.ps1 windows-artifacts

      - name: Move installer artifact to the artifacts folder
        shell: pwsh
        run: Move-Item -Path "./src-tauri/target/release/bundle/msi/*.msi" -Destination windows-artifacts

      - name: Cache artifacts
        uses: actions/cache@v3
        with:
          path: ./windows-artifacts
          key: windows-artifacts-cache


  # Builds for Ubuntu and caches it's artifacts
  build-ubuntu:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    defaults:
      run:
        working-directory: ./tauri-app
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Node setup
        uses: actions/setup-node@v3
        with:
          node-version: 18
      
      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: yarn install
      
      - name: Build
        run: yarn tauri build

      - name: Move generated artifacts to artifacts folder
        run: |
          mkdir ubuntu-artifacts
          mv ./src-tauri/target/release/bundle/appimage/*.AppImage ./ubuntu-artifacts
          mv ./src-tauri/target/release/bundle/deb/*.deb ./ubuntu-artifacts

      - name: Cache artifacts
        uses: actions/cache@v3
        with:
          path: ./ubuntu-artifacts
          key: ubuntu-artifacts-cache


  # Creates a new release with the Windows and Ubuntu artifacts
  create-release:
    needs: [build-windows, build-ubuntu]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      # Restores artifacts from Windows build
      - name: Restore Windows artifacts
        id: windows-restore
        uses: actions/cache/restore@v3
        with:
          path: ./windows-artifacts
          key: windows-artifacts-cache
      - name: Save restores Windows artifacts
        uses: actions/cache/save@v3
        with:
          path: ./windows-artifacts
          key: ${{ steps.windows-restore.outputs.cache-primary-key }}

      # Restores artifacts from Ubuntu build
      - name: Restore Ubuntu artifacts
        id: ubuntu-restore
        uses: actions/cache/restore@v3
        with:
          path: ./ubuntu-artifacts
          key: ubuntu-artifacts-cache
      - name: Save restores Ubuntu artifacts
        uses: actions/cache/save@v3
        with:
          path: ./ubuntu-artifacts
          key: ${{ steps.ubuntu-restore.outputs.cache-primary-key }}
      
      # Creates a release
      # TODO create release with assets
      - name: Test
        run: ls -lha
